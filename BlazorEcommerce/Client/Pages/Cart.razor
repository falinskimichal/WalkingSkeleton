@page "/cart"
@inject ICartService cartService
@inject IOrderService orderService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else if (orderPlaced)
{
    <span>Thnak you for your order! You can check your order <a href="orders">here</a></span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="number" value="@product.Quantity"
                    @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                           class="form-control input-quantity" min="1" />
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId,  product.ProductTypeId))">
                        Remove
                    </button>
                </div>
                <div class="cart-product-price ">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count):$@cartProducts.Sum(@product => @product.Price * product.Quantity)
        </div>
    </div>

    <button @onclick="PlaceOrder" class="btn alert-success float-end" mt-1>Place Order</button>
}



@code {
    List<CartProductResponseDto> cartProducts = null;
    string message = "Loading cart...";
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await cartService.RemoveProductFromTheCart(productId, productTypeId);
        await LoadCart();
    }


    private async Task LoadCart()
    {
        await cartService.GetCartItemsCount();
        cartProducts = await cartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDto product)
    {
        product.Quantity = int.Parse(e.Value.ToString());

        if (product.Quantity < 1)
            product.Quantity = 1;
        await cartService.UpdateQuantit(product);
    }

    private async Task PlaceOrder()
    {
        await orderService.PlaceOrder();
        await cartService.GetCartItemsCount();
        orderPlaced = true;
    }
}
